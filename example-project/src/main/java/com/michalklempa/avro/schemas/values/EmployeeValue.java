/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.michalklempa.avro.schemas.values;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** This is an example of composite Avro value prepared for Kafka topic value with subtype, reusing common subtypes, like Location and PersonalInformation */
@org.apache.avro.specific.AvroGenerated
public class EmployeeValue extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4555630604751442251L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EmployeeValue\",\"namespace\":\"com.michalklempa.avro.schemas.values\",\"doc\":\"This is an example of composite Avro value prepared for Kafka topic value with subtype, reusing common subtypes, like Location and PersonalInformation\",\"fields\":[{\"name\":\"key\",\"type\":{\"type\":\"record\",\"name\":\"EmployeeKey\",\"namespace\":\"com.michalklempa.avro.schemas.keys\",\"doc\":\"This is an example of composite Avro key prepared for Kafka with enum subtype\",\"fields\":[{\"name\":\"department\",\"type\":{\"type\":\"enum\",\"name\":\"Department\",\"namespace\":\"com.michalklempa.avro.schemas.common\",\"doc\":\"Department enum\",\"symbols\":[\"FRONTEND\",\"BACKEND\",\"DATABASE\",\"ADMIN\"]},\"doc\":\"Company Department, this is enum subtype found elsewhere in source file, to demonstrate schema composition\"},{\"name\":\"id\",\"type\":\"long\",\"doc\":\"Employee id with regard to the company\"}],\"outputFileSuffix\":\"-key\"},\"doc\":\"Lets repeat the key of this record, even if the record is outside Kafka topic, to retain the key of Employee\"},{\"name\":\"personalInformation\",\"type\":{\"type\":\"record\",\"name\":\"PersonalInformation\",\"namespace\":\"com.michalklempa.avro.schemas.common\",\"doc\":\"PersonalInformation, including Location as a subtype\",\"fields\":[{\"name\":\"location\",\"type\":{\"type\":\"record\",\"name\":\"Location\",\"doc\":\"Location, includes union of two subtypes and one primitive type- string\",\"fields\":[{\"name\":\"locationSpec\",\"type\":[{\"type\":\"record\",\"name\":\"GPS\",\"doc\":\"GPS\",\"fields\":[{\"name\":\"lat\",\"type\":\"double\"},{\"name\":\"lon\",\"type\":\"double\"}]},{\"type\":\"string\",\"avro.java.string\":\"String\"},{\"type\":\"record\",\"name\":\"Address\",\"doc\":\"Address\",\"fields\":[{\"name\":\"street\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"city\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}]}]},\"doc\":\"Location\"},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"surname\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]},\"doc\":\"Employee Personal Information (which includes Location as a subtype)\"}],\"outputFileSuffix\":\"-value\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<EmployeeValue> ENCODER =
      new BinaryMessageEncoder<EmployeeValue>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<EmployeeValue> DECODER =
      new BinaryMessageDecoder<EmployeeValue>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<EmployeeValue> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<EmployeeValue> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<EmployeeValue> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<EmployeeValue>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this EmployeeValue to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a EmployeeValue from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a EmployeeValue instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static EmployeeValue fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Lets repeat the key of this record, even if the record is outside Kafka topic, to retain the key of Employee */
  @Deprecated public com.michalklempa.avro.schemas.keys.EmployeeKey key;
  /** Employee Personal Information (which includes Location as a subtype) */
  @Deprecated public com.michalklempa.avro.schemas.common.PersonalInformation personalInformation;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public EmployeeValue() {}

  /**
   * All-args constructor.
   * @param key Lets repeat the key of this record, even if the record is outside Kafka topic, to retain the key of Employee
   * @param personalInformation Employee Personal Information (which includes Location as a subtype)
   */
  public EmployeeValue(com.michalklempa.avro.schemas.keys.EmployeeKey key, com.michalklempa.avro.schemas.common.PersonalInformation personalInformation) {
    this.key = key;
    this.personalInformation = personalInformation;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return key;
    case 1: return personalInformation;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: key = (com.michalklempa.avro.schemas.keys.EmployeeKey)value$; break;
    case 1: personalInformation = (com.michalklempa.avro.schemas.common.PersonalInformation)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'key' field.
   * @return Lets repeat the key of this record, even if the record is outside Kafka topic, to retain the key of Employee
   */
  public com.michalklempa.avro.schemas.keys.EmployeeKey getKey() {
    return key;
  }


  /**
   * Sets the value of the 'key' field.
   * Lets repeat the key of this record, even if the record is outside Kafka topic, to retain the key of Employee
   * @param value the value to set.
   */
  public void setKey(com.michalklempa.avro.schemas.keys.EmployeeKey value) {
    this.key = value;
  }

  /**
   * Gets the value of the 'personalInformation' field.
   * @return Employee Personal Information (which includes Location as a subtype)
   */
  public com.michalklempa.avro.schemas.common.PersonalInformation getPersonalInformation() {
    return personalInformation;
  }


  /**
   * Sets the value of the 'personalInformation' field.
   * Employee Personal Information (which includes Location as a subtype)
   * @param value the value to set.
   */
  public void setPersonalInformation(com.michalklempa.avro.schemas.common.PersonalInformation value) {
    this.personalInformation = value;
  }

  /**
   * Creates a new EmployeeValue RecordBuilder.
   * @return A new EmployeeValue RecordBuilder
   */
  public static com.michalklempa.avro.schemas.values.EmployeeValue.Builder newBuilder() {
    return new com.michalklempa.avro.schemas.values.EmployeeValue.Builder();
  }

  /**
   * Creates a new EmployeeValue RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EmployeeValue RecordBuilder
   */
  public static com.michalklempa.avro.schemas.values.EmployeeValue.Builder newBuilder(com.michalklempa.avro.schemas.values.EmployeeValue.Builder other) {
    if (other == null) {
      return new com.michalklempa.avro.schemas.values.EmployeeValue.Builder();
    } else {
      return new com.michalklempa.avro.schemas.values.EmployeeValue.Builder(other);
    }
  }

  /**
   * Creates a new EmployeeValue RecordBuilder by copying an existing EmployeeValue instance.
   * @param other The existing instance to copy.
   * @return A new EmployeeValue RecordBuilder
   */
  public static com.michalklempa.avro.schemas.values.EmployeeValue.Builder newBuilder(com.michalklempa.avro.schemas.values.EmployeeValue other) {
    if (other == null) {
      return new com.michalklempa.avro.schemas.values.EmployeeValue.Builder();
    } else {
      return new com.michalklempa.avro.schemas.values.EmployeeValue.Builder(other);
    }
  }

  /**
   * RecordBuilder for EmployeeValue instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EmployeeValue>
    implements org.apache.avro.data.RecordBuilder<EmployeeValue> {

    /** Lets repeat the key of this record, even if the record is outside Kafka topic, to retain the key of Employee */
    private com.michalklempa.avro.schemas.keys.EmployeeKey key;
    private com.michalklempa.avro.schemas.keys.EmployeeKey.Builder keyBuilder;
    /** Employee Personal Information (which includes Location as a subtype) */
    private com.michalklempa.avro.schemas.common.PersonalInformation personalInformation;
    private com.michalklempa.avro.schemas.common.PersonalInformation.Builder personalInformationBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.michalklempa.avro.schemas.values.EmployeeValue.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.key)) {
        this.key = data().deepCopy(fields()[0].schema(), other.key);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasKeyBuilder()) {
        this.keyBuilder = com.michalklempa.avro.schemas.keys.EmployeeKey.newBuilder(other.getKeyBuilder());
      }
      if (isValidValue(fields()[1], other.personalInformation)) {
        this.personalInformation = data().deepCopy(fields()[1].schema(), other.personalInformation);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasPersonalInformationBuilder()) {
        this.personalInformationBuilder = com.michalklempa.avro.schemas.common.PersonalInformation.newBuilder(other.getPersonalInformationBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing EmployeeValue instance
     * @param other The existing instance to copy.
     */
    private Builder(com.michalklempa.avro.schemas.values.EmployeeValue other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.key)) {
        this.key = data().deepCopy(fields()[0].schema(), other.key);
        fieldSetFlags()[0] = true;
      }
      this.keyBuilder = null;
      if (isValidValue(fields()[1], other.personalInformation)) {
        this.personalInformation = data().deepCopy(fields()[1].schema(), other.personalInformation);
        fieldSetFlags()[1] = true;
      }
      this.personalInformationBuilder = null;
    }

    /**
      * Gets the value of the 'key' field.
      * Lets repeat the key of this record, even if the record is outside Kafka topic, to retain the key of Employee
      * @return The value.
      */
    public com.michalklempa.avro.schemas.keys.EmployeeKey getKey() {
      return key;
    }


    /**
      * Sets the value of the 'key' field.
      * Lets repeat the key of this record, even if the record is outside Kafka topic, to retain the key of Employee
      * @param value The value of 'key'.
      * @return This builder.
      */
    public com.michalklempa.avro.schemas.values.EmployeeValue.Builder setKey(com.michalklempa.avro.schemas.keys.EmployeeKey value) {
      validate(fields()[0], value);
      this.keyBuilder = null;
      this.key = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'key' field has been set.
      * Lets repeat the key of this record, even if the record is outside Kafka topic, to retain the key of Employee
      * @return True if the 'key' field has been set, false otherwise.
      */
    public boolean hasKey() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'key' field and creates one if it doesn't exist yet.
     * Lets repeat the key of this record, even if the record is outside Kafka topic, to retain the key of Employee
     * @return This builder.
     */
    public com.michalklempa.avro.schemas.keys.EmployeeKey.Builder getKeyBuilder() {
      if (keyBuilder == null) {
        if (hasKey()) {
          setKeyBuilder(com.michalklempa.avro.schemas.keys.EmployeeKey.newBuilder(key));
        } else {
          setKeyBuilder(com.michalklempa.avro.schemas.keys.EmployeeKey.newBuilder());
        }
      }
      return keyBuilder;
    }

    /**
     * Sets the Builder instance for the 'key' field
     * Lets repeat the key of this record, even if the record is outside Kafka topic, to retain the key of Employee
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.michalklempa.avro.schemas.values.EmployeeValue.Builder setKeyBuilder(com.michalklempa.avro.schemas.keys.EmployeeKey.Builder value) {
      clearKey();
      keyBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'key' field has an active Builder instance
     * Lets repeat the key of this record, even if the record is outside Kafka topic, to retain the key of Employee
     * @return True if the 'key' field has an active Builder instance
     */
    public boolean hasKeyBuilder() {
      return keyBuilder != null;
    }

    /**
      * Clears the value of the 'key' field.
      * Lets repeat the key of this record, even if the record is outside Kafka topic, to retain the key of Employee
      * @return This builder.
      */
    public com.michalklempa.avro.schemas.values.EmployeeValue.Builder clearKey() {
      key = null;
      keyBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'personalInformation' field.
      * Employee Personal Information (which includes Location as a subtype)
      * @return The value.
      */
    public com.michalklempa.avro.schemas.common.PersonalInformation getPersonalInformation() {
      return personalInformation;
    }


    /**
      * Sets the value of the 'personalInformation' field.
      * Employee Personal Information (which includes Location as a subtype)
      * @param value The value of 'personalInformation'.
      * @return This builder.
      */
    public com.michalklempa.avro.schemas.values.EmployeeValue.Builder setPersonalInformation(com.michalklempa.avro.schemas.common.PersonalInformation value) {
      validate(fields()[1], value);
      this.personalInformationBuilder = null;
      this.personalInformation = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'personalInformation' field has been set.
      * Employee Personal Information (which includes Location as a subtype)
      * @return True if the 'personalInformation' field has been set, false otherwise.
      */
    public boolean hasPersonalInformation() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'personalInformation' field and creates one if it doesn't exist yet.
     * Employee Personal Information (which includes Location as a subtype)
     * @return This builder.
     */
    public com.michalklempa.avro.schemas.common.PersonalInformation.Builder getPersonalInformationBuilder() {
      if (personalInformationBuilder == null) {
        if (hasPersonalInformation()) {
          setPersonalInformationBuilder(com.michalklempa.avro.schemas.common.PersonalInformation.newBuilder(personalInformation));
        } else {
          setPersonalInformationBuilder(com.michalklempa.avro.schemas.common.PersonalInformation.newBuilder());
        }
      }
      return personalInformationBuilder;
    }

    /**
     * Sets the Builder instance for the 'personalInformation' field
     * Employee Personal Information (which includes Location as a subtype)
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.michalklempa.avro.schemas.values.EmployeeValue.Builder setPersonalInformationBuilder(com.michalklempa.avro.schemas.common.PersonalInformation.Builder value) {
      clearPersonalInformation();
      personalInformationBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'personalInformation' field has an active Builder instance
     * Employee Personal Information (which includes Location as a subtype)
     * @return True if the 'personalInformation' field has an active Builder instance
     */
    public boolean hasPersonalInformationBuilder() {
      return personalInformationBuilder != null;
    }

    /**
      * Clears the value of the 'personalInformation' field.
      * Employee Personal Information (which includes Location as a subtype)
      * @return This builder.
      */
    public com.michalklempa.avro.schemas.values.EmployeeValue.Builder clearPersonalInformation() {
      personalInformation = null;
      personalInformationBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public EmployeeValue build() {
      try {
        EmployeeValue record = new EmployeeValue();
        if (keyBuilder != null) {
          try {
            record.key = this.keyBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("key"));
            throw e;
          }
        } else {
          record.key = fieldSetFlags()[0] ? this.key : (com.michalklempa.avro.schemas.keys.EmployeeKey) defaultValue(fields()[0]);
        }
        if (personalInformationBuilder != null) {
          try {
            record.personalInformation = this.personalInformationBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("personalInformation"));
            throw e;
          }
        } else {
          record.personalInformation = fieldSetFlags()[1] ? this.personalInformation : (com.michalklempa.avro.schemas.common.PersonalInformation) defaultValue(fields()[1]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<EmployeeValue>
    WRITER$ = (org.apache.avro.io.DatumWriter<EmployeeValue>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<EmployeeValue>
    READER$ = (org.apache.avro.io.DatumReader<EmployeeValue>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










