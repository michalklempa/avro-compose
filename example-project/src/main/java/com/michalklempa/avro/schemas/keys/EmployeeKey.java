/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.michalklempa.avro.schemas.keys;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** This is an example of composite Avro key prepared for Kafka with enum subtype */
@org.apache.avro.specific.AvroGenerated
public class EmployeeKey extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7610359010982880707L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EmployeeKey\",\"namespace\":\"com.michalklempa.avro.schemas.keys\",\"doc\":\"This is an example of composite Avro key prepared for Kafka with enum subtype\",\"fields\":[{\"name\":\"department\",\"type\":{\"type\":\"enum\",\"name\":\"Department\",\"namespace\":\"com.michalklempa.avro.schemas.common\",\"doc\":\"Department enum\",\"symbols\":[\"FRONTEND\",\"BACKEND\",\"DATABASE\",\"ADMIN\"]},\"doc\":\"Company Department, this is enum subtype found elsewhere in source file, to demonstrate schema composition\"},{\"name\":\"id\",\"type\":\"long\",\"doc\":\"Employee id with regard to the company\"}],\"outputFileSuffix\":\"-key\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<EmployeeKey> ENCODER =
      new BinaryMessageEncoder<EmployeeKey>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<EmployeeKey> DECODER =
      new BinaryMessageDecoder<EmployeeKey>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<EmployeeKey> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<EmployeeKey> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<EmployeeKey> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<EmployeeKey>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this EmployeeKey to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a EmployeeKey from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a EmployeeKey instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static EmployeeKey fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Company Department, this is enum subtype found elsewhere in source file, to demonstrate schema composition */
  @Deprecated public com.michalklempa.avro.schemas.common.Department department;
  /** Employee id with regard to the company */
  @Deprecated public long id;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public EmployeeKey() {}

  /**
   * All-args constructor.
   * @param department Company Department, this is enum subtype found elsewhere in source file, to demonstrate schema composition
   * @param id Employee id with regard to the company
   */
  public EmployeeKey(com.michalklempa.avro.schemas.common.Department department, java.lang.Long id) {
    this.department = department;
    this.id = id;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return department;
    case 1: return id;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: department = (com.michalklempa.avro.schemas.common.Department)value$; break;
    case 1: id = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'department' field.
   * @return Company Department, this is enum subtype found elsewhere in source file, to demonstrate schema composition
   */
  public com.michalklempa.avro.schemas.common.Department getDepartment() {
    return department;
  }


  /**
   * Sets the value of the 'department' field.
   * Company Department, this is enum subtype found elsewhere in source file, to demonstrate schema composition
   * @param value the value to set.
   */
  public void setDepartment(com.michalklempa.avro.schemas.common.Department value) {
    this.department = value;
  }

  /**
   * Gets the value of the 'id' field.
   * @return Employee id with regard to the company
   */
  public long getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * Employee id with regard to the company
   * @param value the value to set.
   */
  public void setId(long value) {
    this.id = value;
  }

  /**
   * Creates a new EmployeeKey RecordBuilder.
   * @return A new EmployeeKey RecordBuilder
   */
  public static com.michalklempa.avro.schemas.keys.EmployeeKey.Builder newBuilder() {
    return new com.michalklempa.avro.schemas.keys.EmployeeKey.Builder();
  }

  /**
   * Creates a new EmployeeKey RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EmployeeKey RecordBuilder
   */
  public static com.michalklempa.avro.schemas.keys.EmployeeKey.Builder newBuilder(com.michalklempa.avro.schemas.keys.EmployeeKey.Builder other) {
    if (other == null) {
      return new com.michalklempa.avro.schemas.keys.EmployeeKey.Builder();
    } else {
      return new com.michalklempa.avro.schemas.keys.EmployeeKey.Builder(other);
    }
  }

  /**
   * Creates a new EmployeeKey RecordBuilder by copying an existing EmployeeKey instance.
   * @param other The existing instance to copy.
   * @return A new EmployeeKey RecordBuilder
   */
  public static com.michalklempa.avro.schemas.keys.EmployeeKey.Builder newBuilder(com.michalklempa.avro.schemas.keys.EmployeeKey other) {
    if (other == null) {
      return new com.michalklempa.avro.schemas.keys.EmployeeKey.Builder();
    } else {
      return new com.michalklempa.avro.schemas.keys.EmployeeKey.Builder(other);
    }
  }

  /**
   * RecordBuilder for EmployeeKey instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EmployeeKey>
    implements org.apache.avro.data.RecordBuilder<EmployeeKey> {

    /** Company Department, this is enum subtype found elsewhere in source file, to demonstrate schema composition */
    private com.michalklempa.avro.schemas.common.Department department;
    /** Employee id with regard to the company */
    private long id;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.michalklempa.avro.schemas.keys.EmployeeKey.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.department)) {
        this.department = data().deepCopy(fields()[0].schema(), other.department);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.id)) {
        this.id = data().deepCopy(fields()[1].schema(), other.id);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
    }

    /**
     * Creates a Builder by copying an existing EmployeeKey instance
     * @param other The existing instance to copy.
     */
    private Builder(com.michalklempa.avro.schemas.keys.EmployeeKey other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.department)) {
        this.department = data().deepCopy(fields()[0].schema(), other.department);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.id)) {
        this.id = data().deepCopy(fields()[1].schema(), other.id);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'department' field.
      * Company Department, this is enum subtype found elsewhere in source file, to demonstrate schema composition
      * @return The value.
      */
    public com.michalklempa.avro.schemas.common.Department getDepartment() {
      return department;
    }


    /**
      * Sets the value of the 'department' field.
      * Company Department, this is enum subtype found elsewhere in source file, to demonstrate schema composition
      * @param value The value of 'department'.
      * @return This builder.
      */
    public com.michalklempa.avro.schemas.keys.EmployeeKey.Builder setDepartment(com.michalklempa.avro.schemas.common.Department value) {
      validate(fields()[0], value);
      this.department = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'department' field has been set.
      * Company Department, this is enum subtype found elsewhere in source file, to demonstrate schema composition
      * @return True if the 'department' field has been set, false otherwise.
      */
    public boolean hasDepartment() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'department' field.
      * Company Department, this is enum subtype found elsewhere in source file, to demonstrate schema composition
      * @return This builder.
      */
    public com.michalklempa.avro.schemas.keys.EmployeeKey.Builder clearDepartment() {
      department = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'id' field.
      * Employee id with regard to the company
      * @return The value.
      */
    public long getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * Employee id with regard to the company
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.michalklempa.avro.schemas.keys.EmployeeKey.Builder setId(long value) {
      validate(fields()[1], value);
      this.id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * Employee id with regard to the company
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'id' field.
      * Employee id with regard to the company
      * @return This builder.
      */
    public com.michalklempa.avro.schemas.keys.EmployeeKey.Builder clearId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public EmployeeKey build() {
      try {
        EmployeeKey record = new EmployeeKey();
        record.department = fieldSetFlags()[0] ? this.department : (com.michalklempa.avro.schemas.common.Department) defaultValue(fields()[0]);
        record.id = fieldSetFlags()[1] ? this.id : (java.lang.Long) defaultValue(fields()[1]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<EmployeeKey>
    WRITER$ = (org.apache.avro.io.DatumWriter<EmployeeKey>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<EmployeeKey>
    READER$ = (org.apache.avro.io.DatumReader<EmployeeKey>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeEnum(this.department.ordinal());

    out.writeLong(this.id);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.department = com.michalklempa.avro.schemas.common.Department.values()[in.readEnum()];

      this.id = in.readLong();

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.department = com.michalklempa.avro.schemas.common.Department.values()[in.readEnum()];
          break;

        case 1:
          this.id = in.readLong();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










