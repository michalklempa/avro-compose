/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.michalklempa.avro.schemas.common;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** PersonalInformation, including Location as a subtype */
@org.apache.avro.specific.AvroGenerated
public class PersonalInformation extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2043839197939583449L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PersonalInformation\",\"namespace\":\"com.michalklempa.avro.schemas.common\",\"doc\":\"PersonalInformation, including Location as a subtype\",\"fields\":[{\"name\":\"location\",\"type\":{\"type\":\"record\",\"name\":\"Location\",\"doc\":\"Location, includes union of two subtypes and one primitive type- string\",\"fields\":[{\"name\":\"locationSpec\",\"type\":[{\"type\":\"record\",\"name\":\"GPS\",\"doc\":\"GPS\",\"fields\":[{\"name\":\"lat\",\"type\":\"double\"},{\"name\":\"lon\",\"type\":\"double\"}]},{\"type\":\"string\",\"avro.java.string\":\"String\"},{\"type\":\"record\",\"name\":\"Address\",\"doc\":\"Address\",\"fields\":[{\"name\":\"street\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"city\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}]}]},\"doc\":\"Location\"},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"surname\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PersonalInformation> ENCODER =
      new BinaryMessageEncoder<PersonalInformation>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PersonalInformation> DECODER =
      new BinaryMessageDecoder<PersonalInformation>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<PersonalInformation> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<PersonalInformation> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<PersonalInformation> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<PersonalInformation>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this PersonalInformation to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a PersonalInformation from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a PersonalInformation instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static PersonalInformation fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Location */
  @Deprecated public com.michalklempa.avro.schemas.common.Location location;
  @Deprecated public java.lang.String name;
  @Deprecated public java.lang.String surname;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PersonalInformation() {}

  /**
   * All-args constructor.
   * @param location Location
   * @param name The new value for name
   * @param surname The new value for surname
   */
  public PersonalInformation(com.michalklempa.avro.schemas.common.Location location, java.lang.String name, java.lang.String surname) {
    this.location = location;
    this.name = name;
    this.surname = surname;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return location;
    case 1: return name;
    case 2: return surname;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: location = (com.michalklempa.avro.schemas.common.Location)value$; break;
    case 1: name = (java.lang.String)value$; break;
    case 2: surname = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'location' field.
   * @return Location
   */
  public com.michalklempa.avro.schemas.common.Location getLocation() {
    return location;
  }


  /**
   * Sets the value of the 'location' field.
   * Location
   * @param value the value to set.
   */
  public void setLocation(com.michalklempa.avro.schemas.common.Location value) {
    this.location = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.String getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'surname' field.
   * @return The value of the 'surname' field.
   */
  public java.lang.String getSurname() {
    return surname;
  }


  /**
   * Sets the value of the 'surname' field.
   * @param value the value to set.
   */
  public void setSurname(java.lang.String value) {
    this.surname = value;
  }

  /**
   * Creates a new PersonalInformation RecordBuilder.
   * @return A new PersonalInformation RecordBuilder
   */
  public static com.michalklempa.avro.schemas.common.PersonalInformation.Builder newBuilder() {
    return new com.michalklempa.avro.schemas.common.PersonalInformation.Builder();
  }

  /**
   * Creates a new PersonalInformation RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PersonalInformation RecordBuilder
   */
  public static com.michalklempa.avro.schemas.common.PersonalInformation.Builder newBuilder(com.michalklempa.avro.schemas.common.PersonalInformation.Builder other) {
    if (other == null) {
      return new com.michalklempa.avro.schemas.common.PersonalInformation.Builder();
    } else {
      return new com.michalklempa.avro.schemas.common.PersonalInformation.Builder(other);
    }
  }

  /**
   * Creates a new PersonalInformation RecordBuilder by copying an existing PersonalInformation instance.
   * @param other The existing instance to copy.
   * @return A new PersonalInformation RecordBuilder
   */
  public static com.michalklempa.avro.schemas.common.PersonalInformation.Builder newBuilder(com.michalklempa.avro.schemas.common.PersonalInformation other) {
    if (other == null) {
      return new com.michalklempa.avro.schemas.common.PersonalInformation.Builder();
    } else {
      return new com.michalklempa.avro.schemas.common.PersonalInformation.Builder(other);
    }
  }

  /**
   * RecordBuilder for PersonalInformation instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PersonalInformation>
    implements org.apache.avro.data.RecordBuilder<PersonalInformation> {

    /** Location */
    private com.michalklempa.avro.schemas.common.Location location;
    private com.michalklempa.avro.schemas.common.Location.Builder locationBuilder;
    private java.lang.String name;
    private java.lang.String surname;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.michalklempa.avro.schemas.common.PersonalInformation.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.location)) {
        this.location = data().deepCopy(fields()[0].schema(), other.location);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasLocationBuilder()) {
        this.locationBuilder = com.michalklempa.avro.schemas.common.Location.newBuilder(other.getLocationBuilder());
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.surname)) {
        this.surname = data().deepCopy(fields()[2].schema(), other.surname);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing PersonalInformation instance
     * @param other The existing instance to copy.
     */
    private Builder(com.michalklempa.avro.schemas.common.PersonalInformation other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.location)) {
        this.location = data().deepCopy(fields()[0].schema(), other.location);
        fieldSetFlags()[0] = true;
      }
      this.locationBuilder = null;
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.surname)) {
        this.surname = data().deepCopy(fields()[2].schema(), other.surname);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'location' field.
      * Location
      * @return The value.
      */
    public com.michalklempa.avro.schemas.common.Location getLocation() {
      return location;
    }


    /**
      * Sets the value of the 'location' field.
      * Location
      * @param value The value of 'location'.
      * @return This builder.
      */
    public com.michalklempa.avro.schemas.common.PersonalInformation.Builder setLocation(com.michalklempa.avro.schemas.common.Location value) {
      validate(fields()[0], value);
      this.locationBuilder = null;
      this.location = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'location' field has been set.
      * Location
      * @return True if the 'location' field has been set, false otherwise.
      */
    public boolean hasLocation() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'location' field and creates one if it doesn't exist yet.
     * Location
     * @return This builder.
     */
    public com.michalklempa.avro.schemas.common.Location.Builder getLocationBuilder() {
      if (locationBuilder == null) {
        if (hasLocation()) {
          setLocationBuilder(com.michalklempa.avro.schemas.common.Location.newBuilder(location));
        } else {
          setLocationBuilder(com.michalklempa.avro.schemas.common.Location.newBuilder());
        }
      }
      return locationBuilder;
    }

    /**
     * Sets the Builder instance for the 'location' field
     * Location
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.michalklempa.avro.schemas.common.PersonalInformation.Builder setLocationBuilder(com.michalklempa.avro.schemas.common.Location.Builder value) {
      clearLocation();
      locationBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'location' field has an active Builder instance
     * Location
     * @return True if the 'location' field has an active Builder instance
     */
    public boolean hasLocationBuilder() {
      return locationBuilder != null;
    }

    /**
      * Clears the value of the 'location' field.
      * Location
      * @return This builder.
      */
    public com.michalklempa.avro.schemas.common.PersonalInformation.Builder clearLocation() {
      location = null;
      locationBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.michalklempa.avro.schemas.common.PersonalInformation.Builder setName(java.lang.String value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public com.michalklempa.avro.schemas.common.PersonalInformation.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'surname' field.
      * @return The value.
      */
    public java.lang.String getSurname() {
      return surname;
    }


    /**
      * Sets the value of the 'surname' field.
      * @param value The value of 'surname'.
      * @return This builder.
      */
    public com.michalklempa.avro.schemas.common.PersonalInformation.Builder setSurname(java.lang.String value) {
      validate(fields()[2], value);
      this.surname = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'surname' field has been set.
      * @return True if the 'surname' field has been set, false otherwise.
      */
    public boolean hasSurname() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'surname' field.
      * @return This builder.
      */
    public com.michalklempa.avro.schemas.common.PersonalInformation.Builder clearSurname() {
      surname = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PersonalInformation build() {
      try {
        PersonalInformation record = new PersonalInformation();
        if (locationBuilder != null) {
          try {
            record.location = this.locationBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("location"));
            throw e;
          }
        } else {
          record.location = fieldSetFlags()[0] ? this.location : (com.michalklempa.avro.schemas.common.Location) defaultValue(fields()[0]);
        }
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.String) defaultValue(fields()[1]);
        record.surname = fieldSetFlags()[2] ? this.surname : (java.lang.String) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PersonalInformation>
    WRITER$ = (org.apache.avro.io.DatumWriter<PersonalInformation>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PersonalInformation>
    READER$ = (org.apache.avro.io.DatumReader<PersonalInformation>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










